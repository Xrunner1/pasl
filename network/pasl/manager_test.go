/*
PASL - Personalized Accounts & Secure Ledger

Copyright (C) 2018 PASL Project

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

package pasl

import (
	"bytes"
	"encoding/hex"
	"testing"

	"github.com/pasl-project/pasl/utils"
)

func TestDeserializeBlocks(t *testing.T) {

	buffer, err := hex.DecodeString("020000000201000100628801004600ca022000666293eb108763de780fd6ee5f2d8f92a9c69fc3e36b5a40a9e8d25523f619c7200097fc795b55d50a41dc8abd099adf96152a2f07a1c35480dd4512abc4e426690120a107000000000000000000000000005147735a1ef2d130005b5f1522007061736c2e66616972706f6f6c2e78797a5f4330334445393841376330303030303020002063b4544af77cf1a3cbf6eaae844772a808a12c2ca9e8965c861d3751bf161b2000c611fbcc6e11f1e859d4c81387b445a2e3414962f4f84c08229dbe0d90d6505f20000000000000007e4b5e7947620478fcb1d498a0084eaaf7d44019200266b1476b0a00000001000000a19d070003000000a8cb030024e301000000000000000000000000000000ca022000666293eb108763de780fd6ee5f2d8f92a9c69fc3e36b5a40a9e8d25523f619c7200097fc795b55d50a41dc8abd099adf96152a2f07a1c35480dd4512abc4e4266901200057e773c096748cbefb32c7c1c7ad04130fa31e68706f3cc023f73dc80b9c19772000056eb2578bb8fd414b1abfaf3e67459ebbcc69aa8145890f5701819036b9d70601000000a19d0700040000003a2707005ddf01000000000000000000000000000000ca022000666293eb108763de780fd6ee5f2d8f92a9c69fc3e36b5a40a9e8d25523f619c7200097fc795b55d50a41dc8abd099adf96152a2f07a1c35480dd4512abc4e4266901200022eeb6bf1a2ac3f96fabe8b4845717e6d4a117c044054b6334b51304ec64cbad20003eb64ba88a0988410286a50278f9825ef529c027a005cda4f069c77b77eb701102000000f0a707000100000000000000000000000000ca022000666293eb108763de780fd6ee5f2d8f92a9c69fc3e36b5a40a9e8d25523f619c7200097fc795b55d50a41dc8abd099adf96152a2f07a1c35480dd4512abc4e42669014600ca022000e45e5d7757ba87c468df08b41e8e21dda16538ac345f16ff64062efb66c66a722000c0e4b0a478123efc18bd712ffe91626a8f355a891e41603b6aacf25fa77855e82000cf0ea05f90796eee9c3dc5fab97039e91b7c3398c9c16a3cd79dc9cec06a149f2000a64ec12db4f635b1e2d329f09840d75038d20ab9dc8fa6ec82d33c1fcea096cf01000000a19d070005000000f0a70700b46701000000000000000000000000000000ca022000666293eb108763de780fd6ee5f2d8f92a9c69fc3e36b5a40a9e8d25523f619c7200097fc795b55d50a41dc8abd099adf96152a2f07a1c35480dd4512abc4e42669012000300a46854b5754c6682ec06d8b3f9be366c746e2720f41086ab8d23bfa045de320002ce4cb9a34a552c72530fe66149e4477265148399650c366dff2fead8cdc189902000000efa707000100000000000000000000000000ca022000666293eb108763de780fd6ee5f2d8f92a9c69fc3e36b5a40a9e8d25523f619c7200097fc795b55d50a41dc8abd099adf96152a2f07a1c35480dd4512abc4e42669014600ca022000e45e5d7757ba87c468df08b41e8e21dda16538ac345f16ff64062efb66c66a722000c0e4b0a478123efc18bd712ffe91626a8f355a891e41603b6aacf25fa77855e820002505500ec6e753ef6ad99b28973d31f853224863d5028316e06ce81f19ea4eef20009ff2cb84e69354665f85d163edadf6b705291a7c32b8cd67491be3f8e347402001000000a69d070001000000efa70700d07600000000000000000000000000000000ca022000666293eb108763de780fd6ee5f2d8f92a9c69fc3e36b5a40a9e8d25523f619c7200097fc795b55d50a41dc8abd099adf96152a2f07a1c35480dd4512abc4e42669012000a948bf4ff5bd719e5045af99cae6c77da93134a7bd28168d7ed92a04ac05e24e20007af964a8aba773bbd45c18f5017e99c591a947f469900f38b20be733967ab55602000000f5a707000100000000000000000000000000ca022000666293eb108763de780fd6ee5f2d8f92a9c69fc3e36b5a40a9e8d25523f619c7200097fc795b55d50a41dc8abd099adf96152a2f07a1c35480dd4512abc4e42669014600ca022000b81815199ea76766759735f829f99f20a45f5281def971cf507f3b0f8693a08020001789c4fa04ff63e8a10752baef743d8c414d475e9536e71f7a17156d7e7c50d520009820d47016256c07ac30b1d8ec83dcfa6df84916ac65768e1b801388890c606a2000b9a31669bbec3647a6795c6f72e4fe0d44ab0e769f31b1417c1e467f473e892d01000000a69d070002000000f5a7070084de01000000000000000000000000000000ca022000666293eb108763de780fd6ee5f2d8f92a9c69fc3e36b5a40a9e8d25523f619c7200097fc795b55d50a41dc8abd099adf96152a2f07a1c35480dd4512abc4e426690120009317277092851c7f00c2527e5669a57038417dd4984660f37ed1512f09d92c292000ba3e8d9ed27361a46334762986dbf611eb5e42abbffcfb4b7f18852784833fd602000000f4a707000100000000000000000000000000ca022000666293eb108763de780fd6ee5f2d8f92a9c69fc3e36b5a40a9e8d25523f619c7200097fc795b55d50a41dc8abd099adf96152a2f07a1c35480dd4512abc4e42669014600ca0220004827190c2e4d9970a4edca77e7485307a6171f5981760f4dd0f191b7d20f3d1920005ccbafb54acd3ff5d8482d41911e7db64847ac685d3ae1af62dd04ab3f9b105920003d66c9f7024b98492350541f5130f35a97167cd4e8c319459c969410e56cfaf02000ff75b968b330fb5eeb3bbcd349daa49910cde628d5813f6948472ae1069ee09a01000000a69d070003000000f4a7070084de01000000000000000000000000000000ca022000666293eb108763de780fd6ee5f2d8f92a9c69fc3e36b5a40a9e8d25523f619c7200097fc795b55d50a41dc8abd099adf96152a2f07a1c35480dd4512abc4e4266901200045c9150792fcff16dc6430df2aee267d0919022a271f4601e6ba88a56387728c20006c7f8a8e60fc441d530cbea1b5210594fc6b34dbfd25f487509594421d53360c0201000100638801004600ca022000666293eb108763de780fd6ee5f2d8f92a9c69fc3e36b5a40a9e8d25523f619c7200097fc795b55d50a41dc8abd099adf96152a2f07a1c35480dd4512abc4e426690120a107000000000000000000000000005847735a02e2d130042d92c622007061736c2e66616972706f6f6c2e78797a5f463937303039373733353430303030302000262d4766f39d8bb6ef0fe3cd1381a01b4dfda22b3e6f4bb0406b16368c0603382000e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855200000000000000074097dbf6a8a6e6ba9aeff7e8239ba8dbe15c6b0d7aa11f8979900000000")
	if err != nil {
		t.FailNow()
	}

	var packet packetGetBlocksResponse
	if err := utils.Deserialize(&packet, bytes.NewBuffer(buffer)); err != nil {
		t.FailNow()
	}

	if len(packet.Blocks) != 2 {
		t.FailNow()
	}
	if len(packet.Blocks[0].Operations) != 10 {
		t.FailNow()
	}
	if len(packet.Blocks[1].Operations) != 0 {
		t.FailNow()
	}
}
